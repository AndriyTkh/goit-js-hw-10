{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["'use strict';\n\n// Описаний у документації\nimport iziToast from 'izitoast';\nimport flatpickr from 'flatpickr';\n// Додатковий імпорт стилів\nimport 'izitoast/dist/css/iziToast.min.css';\nimport 'flatpickr/dist/flatpickr.min.css';\n\nlet userSelectedDate = new Date();\nconst startBtn = document.querySelector('button[data-start]');\nconst day = document.querySelector('span[data-days]');\nconst hour = document.querySelector('span[data-hours]');\nconst minute = document.querySelector('span[data-minutes]');\nconst second = document.querySelector('span[data-seconds]');\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    userSelectedDate = selectedDates[0];\n\n    if (Date.now() > userSelectedDate.getTime()) {\n      iziToast.error({\n        theme: 'dark',\n        position: 'topRight',\n        messageColor: '#FFFFFF',\n        backgroundColor: 'red',\n        progressBarColor: '#ff91a4',\n        message: 'Please choose a date in the future',\n      });\n      startBtn.disabled = true;\n    } else {\n      startBtn.disabled = false;\n    }\n  },\n};\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\nfunction updateTimer(time) {\n  day.textContent = time.days.toString().padStart(2, '0');\n  hour.textContent = time.hours.toString().padStart(2, '0');\n  minute.textContent = time.minutes.toString().padStart(2, '0');\n  second.textContent = time.seconds.toString().padStart(2, '0');\n}\n\nstartBtn.addEventListener('click', event => {\n  startBtn.disabled = true;\n  setInterval(() => {\n    let timeLeft = userSelectedDate.getTime() - Date.now();\n    if (timeLeft > 0) {\n      updateTimer(convertMs(timeLeft));\n    }\n  }, 1000);\n});\n\nflatpickr('#datetime-picker', options);\n\nsetInterval(() => {\n  if (Date.now() > userSelectedDate.getTime()) {\n    startBtn.disabled = true;\n  } else {\n    startBtn.disabled = false;\n  }\n}, 100);\n"],"names":["userSelectedDate","startBtn","day","hour","minute","second","options","selectedDates","iziToast","convertMs","ms","days","hours","minutes","seconds","updateTimer","time","event","timeLeft","flatpickr"],"mappings":"+IASA,IAAIA,EAAmB,IAAI,KAC3B,MAAMC,EAAW,SAAS,cAAc,oBAAoB,EACtDC,EAAM,SAAS,cAAc,iBAAiB,EAC9CC,EAAO,SAAS,cAAc,kBAAkB,EAChDC,EAAS,SAAS,cAAc,oBAAoB,EACpDC,EAAS,SAAS,cAAc,oBAAoB,EAEpDC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrBP,EAAmBO,EAAc,CAAC,EAE9B,KAAK,IAAG,EAAKP,EAAiB,QAAO,GACvCQ,EAAS,MAAM,CACb,MAAO,OACP,SAAU,WACV,aAAc,UACd,gBAAiB,MACjB,iBAAkB,UAClB,QAAS,oCACjB,CAAO,EACDP,EAAS,SAAW,IAEpBA,EAAS,SAAW,EAEvB,CACH,EAEA,SAASQ,EAAUC,EAAI,CAQrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CACA,SAASC,EAAYC,EAAM,CACzBd,EAAI,YAAcc,EAAK,KAAK,SAAQ,EAAG,SAAS,EAAG,GAAG,EACtDb,EAAK,YAAca,EAAK,MAAM,SAAQ,EAAG,SAAS,EAAG,GAAG,EACxDZ,EAAO,YAAcY,EAAK,QAAQ,SAAQ,EAAG,SAAS,EAAG,GAAG,EAC5DX,EAAO,YAAcW,EAAK,QAAQ,SAAQ,EAAG,SAAS,EAAG,GAAG,CAC9D,CAEAf,EAAS,iBAAiB,QAASgB,GAAS,CAC1ChB,EAAS,SAAW,GACpB,YAAY,IAAM,CAChB,IAAIiB,EAAWlB,EAAiB,QAAS,EAAG,KAAK,IAAG,EAChDkB,EAAW,GACbH,EAAYN,EAAUS,CAAQ,CAAC,CAElC,EAAE,GAAI,CACT,CAAC,EAEDC,EAAU,mBAAoBb,CAAO,EAErC,YAAY,IAAM,CACZ,KAAK,IAAG,EAAKN,EAAiB,QAAO,EACvCC,EAAS,SAAW,GAEpBA,EAAS,SAAW,EAExB,EAAG,GAAG"}